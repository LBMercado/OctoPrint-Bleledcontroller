<div class="tab">
    {% if enableWebcam %}
        <!-- ko if: loginStateViewModel.hasPermissionKo(accessViewModel.permissions.WEBCAM) -->
        <div id="bleled_webcam_container" data-bind="visible: webcamMjpgEnabled()">
            <div class="nowebcam" data-bind="visible: !webcamLoaded()">
                <div class="text webcam_loading" data-bind="visible: !webcamLoaded() && !webcamError()">
                    <p><strong>{{ _('Webcam stream loading...') }}</strong></p>
                </div>
                <div class="text webcam_error" data-bind="visible: !webcamLoaded() && webcamError()">
                    <p><strong>{{ _('Webcam stream not loaded') }}</strong></p>
                    <p data-bind="visible: !loginStateViewModel.isAdmin()"><small>{{ _('It might not be configured correctly or require authentication. To have this fixed, get in touch with an administrator of this OctoPrint instance.') }}</small></p>
                    <p data-bind="visible: loginStateViewModel.isAdmin"><small>{{ _('It might not be configured correctly or require authentication. You can change the URL of the stream under "Settings" > "Webcam & Timelapse" > "Webcam" > "Stream URL". If you don\'t have a webcam you can also just disable webcam support there.') }}</small></p>
                    <p data-bind="visible: loginStateViewModel.isUser"><small>{{ _('Currently configured stream URL') }}: <a target="_blank" rel="noreferrer" data-bind="attr: {href: settingsViewModel.webcam_streamUrl}, text: settingsViewModel.webcam_streamUrl"></a></small></p>
                </div>
            </div>
            <div data-bind="css: { webcam_rotated: settingsViewModel.webcam_rotate90(), webcam_unrotated: !settingsViewModel.webcam_rotate90() }">
                <div class="webcam_fixed_ratio" data-bind="css: controlViewModel.webcamRatioClass">
                    <div class="webcam_fixed_ratio_inner">
                        <img id="bleled_webcam_image" data-bind="css: { flipH: settingsViewModel.webcam_flipH(),
                                                                        flipV: settingsViewModel.webcam_flipV() }, 
                                                                 event: { load: onWebcamLoaded, error: onWebcamErrored }, visible: !webcamError()">
                    </div>
                </div>
            </div>
        </div>
        <!-- /ko -->
    {% endif %}
    
    <div class="row-fluid">
        <label class="control-label">Color</label>
        <input class="span" id="color-picker-control" data-jscolor="{format: 'hex'}" data-bind="value: color, enable: is_on, event: {input: updateColor}">
    </div> 
    <div class="row-fluid">
        <label class="control-label">Brightness</label>
        <input type="range" id="brightness-control" min="0" max="100" data-bind="value: brightness, enable: is_on">
    </div>
    <div class="row-fluid-2">
        <label class="control-label">Set LED Strip on? <input type="checkbox" class="span" id="led-strip-on-control" data-bind="checked: is_on"/> </label> 
    </div>
    <div class="row-fluid">
        <button class="btn span6" data-bind="click: applyChanges">Apply</button>
    </div>
</div>